{"ast":null,"code":"import _classCallCheck from \"/Users/jake/code/Shed Studio/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jake/code/Shed Studio/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jake/code/Shed Studio/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jake/code/Shed Studio/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jake/code/Shed Studio/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/jake/code/Shed Studio/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/jake/code/Shed Studio/frontend/src/app/components/videoThumb.js\";\nimport React from 'react';\nimport Gallery from './gallery';\n\nvar VideoThumb =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(VideoThumb, _React$Component);\n\n  function VideoThumb(props) {\n    var _this;\n\n    _classCallCheck(this, VideoThumb);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VideoThumb).call(this, props));\n    _this.state = {\n      expanded: false,\n      playing: false,\n      height: 100,\n      width: 300\n    };\n    _this.handleThumbnailClicked = _this.handleThumbnailClicked.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(VideoThumb, [{\n    key: \"getScreenDimensions\",\n    value: function getScreenDimensions() {\n      var sh = window.innerHeight;\n      var sw = window.innerWidth;\n      return {\n        height: sh,\n        width: sw\n      };\n    }\n  }, {\n    key: \"handleThumbnailClicked\",\n    value: function handleThumbnailClicked(e) {\n      var _this2 = this;\n\n      var videoHeight;\n      var videoWidth;\n      var style;\n      var video = e.currentTarget;\n\n      if (!this.state.expanded) {\n        var viewportDimensions = this.getScreenDimensions();\n        var mobile = viewportDimensions[\"width\"] <= 418;\n        videoWidth = mobile ? viewportDimensions[\"height\"] : viewportDimensions[\"width\"] * 0.8;\n        videoHeight = mobile ? \"\" : videoWidth / 1.7;\n        style = {\n          position: \"fixed\",\n          top: 0,\n          left: 0,\n          margin: 0,\n          backgroundColor: \"grey\",\n          zIndex: 10000,\n          transform: mobile ? \"rotation(90deg)\" : \"\"\n        };\n      } else {\n        videoWidth = 300;\n        videoHeight = 100;\n        style = {};\n      }\n\n      this.setState(function (preS) {\n        return {\n          expanded: !preS.expanded,\n          playing: !preS.playing,\n          style: style,\n          height: videoHeight,\n          width: videoWidth\n        };\n      }, function () {\n        _this2.state.playing ? video.play() : video.pause();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"column has-shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        className: this.state.expanded ? \"is-overlay\" : \"media\",\n        height: this.state.height,\n        width: this.state.width,\n        style: this.state.style,\n        onClick: function onClick(e) {\n          return _this3.handleThumbnailClicked(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"source\", {\n        src: this.props.src,\n        type: \"video/mp4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return VideoThumb;\n}(React.Component);\n\nexport { VideoThumb as default };","map":{"version":3,"sources":["/Users/jake/code/Shed Studio/frontend/src/app/components/videoThumb.js"],"names":["React","Gallery","VideoThumb","props","state","expanded","playing","height","width","handleThumbnailClicked","bind","sh","window","innerHeight","sw","innerWidth","e","videoHeight","videoWidth","style","video","currentTarget","viewportDimensions","getScreenDimensions","mobile","position","top","left","margin","backgroundColor","zIndex","transform","setState","preS","play","pause","src","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Gallery from './gallery';\n\nexport default class VideoThumb extends React.Component\n{\n    constructor(props)\n    {\n        super(props)\n\n        this.state = {\n            expanded: false,\n            playing: false,\n            height: 100,\n            width: 300\n        }\n        this.handleThumbnailClicked = this.handleThumbnailClicked.bind(this)\n    }\n\n    getScreenDimensions()\n    {\n        let sh = window.innerHeight\n        let sw = window.innerWidth\n        return {height: sh, width: sw}\n    }\n\n    handleThumbnailClicked(e)\n    {\n        let videoHeight\n        let videoWidth\n        let style\n        const video = e.currentTarget\n\n        if(!this.state.expanded)\n        {\n            const viewportDimensions = this.getScreenDimensions()\n\n            let mobile = viewportDimensions[\"width\"] <= 418\n\n            videoWidth = mobile ? viewportDimensions[\"height\"] : viewportDimensions[\"width\"]*0.8\n            videoHeight = mobile ? \"\" : videoWidth/1.7\n\n            \n\n            style = {position: \"fixed\",\n                    top: 0,\n                    left: 0,\n                    margin:0,\n                    backgroundColor: \"grey\",\n                    zIndex: 10000,\n                    transform: mobile ? \"rotation(90deg)\" : \"\"\n                    }    \n        } else\n        {\n                videoWidth = 300\n                videoHeight = 100\n\n                style = {}\n        }\n\n        this.setState((preS) => {\n            return {\n            expanded: !preS.expanded,\n            playing: !preS.playing,\n            style: style,\n            height: videoHeight,\n            width: videoWidth,\n            }\n        }, () => {\n            this.state.playing ? video.play() : video.pause()\n        })\n    }\n\n    render()\n    {\n        return(\n        <div className=\"column has-shadow\">\n            <video\n            className={this.state.expanded ? \"is-overlay\" : \"media\"}\n            height={this.state.height} \n            width={this.state.width} \n            style={this.state.style}\n            onClick={(e) => this.handleThumbnailClicked(e)}>\n                <source src={this.props.src} type=\"video/mp4\" />\n            </video>\n        </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}